{"ast":null,"code":"import axios from'axios';import{addToCache,getFromCache}from'../utils/cache';const API_KEY=process.env.REACT_APP_RAPIDAPI_KEY;const BASE_URL=process.env.REACT_APP_BASE_URL;const api=axios.create({baseURL:BASE_URL,headers:{'Content-Type':'application/json','x-rapidapi-host':'weatherapi-com.p.rapidapi.com','x-rapidapi-key':API_KEY}});export const fetchWeatherData=async city=>{// Check if data already in cache\nconst cachedData=getFromCache(city);if(cachedData)return cachedData;// Data not in cache, so fetch from the API\ntry{const response=await api.get('/forecast.json',{params:{q:city,days:'3'}});console.log(response);// For debugging purposes (would not normally be included in production)\nconst newWeather={id:Date.now(),city:response.data.location.name,country:response.data.location.country,temperature_c:response.data.current.temp_c,// Τemperature in Celsius\ntemperature_f:response.data.current.temp_f,// Temperature in Fahrenheit\ndescription:response.data.current.condition.text,icon:response.data.current.condition.icon,forecast:response.data.forecast.forecastday// Array that contains current, tomorrow and the next day \n};// Add the new weather data to cache, if city does not exist\nif(!getFromCache(newWeather.city)){addToCache(newWeather);}return newWeather;}catch(error){console.error('Error fetching weather data:',error);alert(API_KEY);throw error;// Handle errors\n// an den yparxei na mis pernaei h poli mesa sta cards\n}};","map":{"version":3,"names":["axios","addToCache","getFromCache","API_KEY","process","env","REACT_APP_RAPIDAPI_KEY","BASE_URL","REACT_APP_BASE_URL","api","create","baseURL","headers","fetchWeatherData","city","cachedData","response","get","params","q","days","console","log","newWeather","id","Date","now","data","location","name","country","temperature_c","current","temp_c","temperature_f","temp_f","description","condition","text","icon","forecast","forecastday","error","alert"],"sources":["/Users/yiannis/Desktop/Weather-app-react/project/src/services/api.js"],"sourcesContent":["import axios from 'axios';\nimport { addToCache, getFromCache } from '../utils/cache'\n\nconst API_KEY = process.env.REACT_APP_RAPIDAPI_KEY;\nconst BASE_URL = process.env.REACT_APP_BASE_URL;\n\nconst api = axios.create({\n  baseURL: BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n    'x-rapidapi-host': 'weatherapi-com.p.rapidapi.com',\n    'x-rapidapi-key': API_KEY\n  }\n});\n\nexport const fetchWeatherData = async (city) => {\n  \n  // Check if data already in cache\n  const cachedData = getFromCache(city);\n  if(cachedData)\n    return cachedData;\n\n  // Data not in cache, so fetch from the API\n  try {\n    const response = await api.get('/forecast.json', {\n      params: { q: city, days: '3' }\n    });\n\n    console.log(response); // For debugging purposes (would not normally be included in production)\n\n    const newWeather = {\n      id: Date.now(),\n      city: response.data.location.name,\n      country: response.data.location.country,\n      temperature_c: response.data.current.temp_c, // Τemperature in Celsius\n      temperature_f: response.data.current.temp_f,  // Temperature in Fahrenheit\n      description: response.data.current.condition.text,\n      icon: response.data.current.condition.icon, \n      forecast: response.data.forecast.forecastday // Array that contains current, tomorrow and the next day \n\n    };\n\n    // Add the new weather data to cache, if city does not exist\n    if (!getFromCache(newWeather.city)) {\n      addToCache(newWeather);\n    }\n\n    return newWeather;\n  } catch (error) {\n    console.error('Error fetching weather data:', error);\n    alert(API_KEY)\n    throw error; // Handle errors\n    // an den yparxei na mis pernaei h poli mesa sta cards\n  }\n};\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,KAAM,OAAO,CACzB,OAASC,UAAU,CAAEC,YAAY,KAAQ,gBAAgB,CAEzD,KAAM,CAAAC,OAAO,CAAGC,OAAO,CAACC,GAAG,CAACC,sBAAsB,CAClD,KAAM,CAAAC,QAAQ,CAAGH,OAAO,CAACC,GAAG,CAACG,kBAAkB,CAE/C,KAAM,CAAAC,GAAG,CAAGT,KAAK,CAACU,MAAM,CAAC,CACvBC,OAAO,CAAEJ,QAAQ,CACjBK,OAAO,CAAE,CACP,cAAc,CAAE,kBAAkB,CAClC,iBAAiB,CAAE,+BAA+B,CAClD,gBAAgB,CAAET,OACpB,CACF,CAAC,CAAC,CAEF,MAAO,MAAM,CAAAU,gBAAgB,CAAG,KAAO,CAAAC,IAAI,EAAK,CAE9C;AACA,KAAM,CAAAC,UAAU,CAAGb,YAAY,CAACY,IAAI,CAAC,CACrC,GAAGC,UAAU,CACX,MAAO,CAAAA,UAAU,CAEnB;AACA,GAAI,CACF,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAP,GAAG,CAACQ,GAAG,CAAC,gBAAgB,CAAE,CAC/CC,MAAM,CAAE,CAAEC,CAAC,CAAEL,IAAI,CAAEM,IAAI,CAAE,GAAI,CAC/B,CAAC,CAAC,CAEFC,OAAO,CAACC,GAAG,CAACN,QAAQ,CAAC,CAAE;AAEvB,KAAM,CAAAO,UAAU,CAAG,CACjBC,EAAE,CAAEC,IAAI,CAACC,GAAG,CAAC,CAAC,CACdZ,IAAI,CAAEE,QAAQ,CAACW,IAAI,CAACC,QAAQ,CAACC,IAAI,CACjCC,OAAO,CAAEd,QAAQ,CAACW,IAAI,CAACC,QAAQ,CAACE,OAAO,CACvCC,aAAa,CAAEf,QAAQ,CAACW,IAAI,CAACK,OAAO,CAACC,MAAM,CAAE;AAC7CC,aAAa,CAAElB,QAAQ,CAACW,IAAI,CAACK,OAAO,CAACG,MAAM,CAAG;AAC9CC,WAAW,CAAEpB,QAAQ,CAACW,IAAI,CAACK,OAAO,CAACK,SAAS,CAACC,IAAI,CACjDC,IAAI,CAAEvB,QAAQ,CAACW,IAAI,CAACK,OAAO,CAACK,SAAS,CAACE,IAAI,CAC1CC,QAAQ,CAAExB,QAAQ,CAACW,IAAI,CAACa,QAAQ,CAACC,WAAY;AAE/C,CAAC,CAED;AACA,GAAI,CAACvC,YAAY,CAACqB,UAAU,CAACT,IAAI,CAAC,CAAE,CAClCb,UAAU,CAACsB,UAAU,CAAC,CACxB,CAEA,MAAO,CAAAA,UAAU,CACnB,CAAE,MAAOmB,KAAK,CAAE,CACdrB,OAAO,CAACqB,KAAK,CAAC,8BAA8B,CAAEA,KAAK,CAAC,CACpDC,KAAK,CAACxC,OAAO,CAAC,CACd,KAAM,CAAAuC,KAAK,CAAE;AACb;AACF,CACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}