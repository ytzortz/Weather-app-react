{"ast":null,"code":"import axios from 'axios';\nimport { addToCache, getFromCache } from '../utils/cache';\nconst API_KEY = '5236c0bd8emshf7a1cb40b7371e4p16ae74jsnb9f1911703d5';\nconst BASE_URL = 'https://weatherapi-com.p.rapidapi.com';\nconst api = axios.create({\n  baseURL: BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n    'x-rapidapi-host': 'weatherapi-com.p.rapidapi.com',\n    'x-rapidapi-key': API_KEY\n  }\n});\nexport const fetchWeatherData = async city => {\n  // Check if data already in cache\n  const cachedData = getFromCache(city);\n  if (cachedData) return cachedData;\n\n  // Data not in cache, so fetch from the API\n  try {\n    const response = await api.get('/forecast.json', {\n      params: {\n        q: city,\n        days: '3'\n      }\n    });\n    console.log(response); // For debugging purposes (would not normally be included in production)\n\n    const newWeather = {\n      id: Date.now(),\n      city: response.data.location.name,\n      country: response.data.location.country,\n      temperature_c: response.data.current.temp_c,\n      // Τemperature in Celsius\n      temperature_f: response.data.current.temp_f,\n      // Temperature in Fahrenheit\n      description: response.data.current.condition.text,\n      icon: response.data.current.condition.icon,\n      forecast: response.data.forecast.forecastday // Array that contains current, tomorrow and the next day \n    };\n\n    // Add the new weather data to cache, if city does not exist\n    if (!getFromCache(newWeather.city)) {\n      addToCache(newWeather);\n    }\n    return newWeather;\n  } catch (error) {\n    console.error('Error fetching weather data:', error);\n    throw error; // Handle errors\n    // an den yparxei na mis pernaei h poli mesa sta cards\n  }\n};","map":{"version":3,"names":["axios","addToCache","getFromCache","API_KEY","BASE_URL","api","create","baseURL","headers","fetchWeatherData","city","cachedData","response","get","params","q","days","console","log","newWeather","id","Date","now","data","location","name","country","temperature_c","current","temp_c","temperature_f","temp_f","description","condition","text","icon","forecast","forecastday","error"],"sources":["/Users/yiannis/Desktop/Weather-app-react/project/src/services/api.js"],"sourcesContent":["import axios from 'axios';\nimport { addToCache, getFromCache } from '../utils/cache'\n\nconst API_KEY = '5236c0bd8emshf7a1cb40b7371e4p16ae74jsnb9f1911703d5';\nconst BASE_URL = 'https://weatherapi-com.p.rapidapi.com';\n\nconst api = axios.create({\n  baseURL: BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n    'x-rapidapi-host': 'weatherapi-com.p.rapidapi.com',\n    'x-rapidapi-key': API_KEY\n  }\n});\n\nexport const fetchWeatherData = async (city) => {\n  \n  // Check if data already in cache\n  const cachedData = getFromCache(city);\n  if(cachedData)\n    return cachedData;\n\n  // Data not in cache, so fetch from the API\n  try {\n    const response = await api.get('/forecast.json', {\n      params: { q: city, days: '3' }\n    });\n\n    console.log(response); // For debugging purposes (would not normally be included in production)\n\n    const newWeather = {\n      id: Date.now(),\n      city: response.data.location.name,\n      country: response.data.location.country,\n      temperature_c: response.data.current.temp_c, // Τemperature in Celsius\n      temperature_f: response.data.current.temp_f,  // Temperature in Fahrenheit\n      description: response.data.current.condition.text,\n      icon: response.data.current.condition.icon, \n      forecast: response.data.forecast.forecastday // Array that contains current, tomorrow and the next day \n\n    };\n\n    // Add the new weather data to cache, if city does not exist\n    if (!getFromCache(newWeather.city)) {\n      addToCache(newWeather);\n    }\n\n    return newWeather;\n  } catch (error) {\n    console.error('Error fetching weather data:', error);\n    throw error; // Handle errors\n    // an den yparxei na mis pernaei h poli mesa sta cards\n  }\n};\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,UAAU,EAAEC,YAAY,QAAQ,gBAAgB;AAEzD,MAAMC,OAAO,GAAG,oDAAoD;AACpE,MAAMC,QAAQ,GAAG,uCAAuC;AAExD,MAAMC,GAAG,GAAGL,KAAK,CAACM,MAAM,CAAC;EACvBC,OAAO,EAAEH,QAAQ;EACjBI,OAAO,EAAE;IACP,cAAc,EAAE,kBAAkB;IAClC,iBAAiB,EAAE,+BAA+B;IAClD,gBAAgB,EAAEL;EACpB;AACF,CAAC,CAAC;AAEF,OAAO,MAAMM,gBAAgB,GAAG,MAAOC,IAAI,IAAK;EAE9C;EACA,MAAMC,UAAU,GAAGT,YAAY,CAACQ,IAAI,CAAC;EACrC,IAAGC,UAAU,EACX,OAAOA,UAAU;;EAEnB;EACA,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMP,GAAG,CAACQ,GAAG,CAAC,gBAAgB,EAAE;MAC/CC,MAAM,EAAE;QAAEC,CAAC,EAAEL,IAAI;QAAEM,IAAI,EAAE;MAAI;IAC/B,CAAC,CAAC;IAEFC,OAAO,CAACC,GAAG,CAACN,QAAQ,CAAC,CAAC,CAAC;;IAEvB,MAAMO,UAAU,GAAG;MACjBC,EAAE,EAAEC,IAAI,CAACC,GAAG,CAAC,CAAC;MACdZ,IAAI,EAAEE,QAAQ,CAACW,IAAI,CAACC,QAAQ,CAACC,IAAI;MACjCC,OAAO,EAAEd,QAAQ,CAACW,IAAI,CAACC,QAAQ,CAACE,OAAO;MACvCC,aAAa,EAAEf,QAAQ,CAACW,IAAI,CAACK,OAAO,CAACC,MAAM;MAAE;MAC7CC,aAAa,EAAElB,QAAQ,CAACW,IAAI,CAACK,OAAO,CAACG,MAAM;MAAG;MAC9CC,WAAW,EAAEpB,QAAQ,CAACW,IAAI,CAACK,OAAO,CAACK,SAAS,CAACC,IAAI;MACjDC,IAAI,EAAEvB,QAAQ,CAACW,IAAI,CAACK,OAAO,CAACK,SAAS,CAACE,IAAI;MAC1CC,QAAQ,EAAExB,QAAQ,CAACW,IAAI,CAACa,QAAQ,CAACC,WAAW,CAAC;IAE/C,CAAC;;IAED;IACA,IAAI,CAACnC,YAAY,CAACiB,UAAU,CAACT,IAAI,CAAC,EAAE;MAClCT,UAAU,CAACkB,UAAU,CAAC;IACxB;IAEA,OAAOA,UAAU;EACnB,CAAC,CAAC,OAAOmB,KAAK,EAAE;IACdrB,OAAO,CAACqB,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;IACpD,MAAMA,KAAK,CAAC,CAAC;IACb;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}