{"ast":null,"code":"const CACHE_KEY='weatherCache';const CACHE_LIMIT=10;// cache size to 10 cities \nexport const getCache=()=>{const cache=localStorage.getItem(CACHE_KEY);return cache?JSON.parse(cache):[];};export const setCache=cache=>{localStorage.setItem(CACHE_KEY,JSON.stringify(cache));};export const addToCache=weatherData=>{let cache=getCache();cache=cache.filter(item=>item.city!==weatherData.city);// Remove existing entry for the city\ncache.unshift(weatherData);// Add new data at the beginning\nif(cache.length>CACHE_LIMIT){cache.pop();// Remove the oldest entry if the cache exceeds the limit\n}setCache(cache);};export const getFromCache=city=>{const cache=getCache();return cache.find(item=>item.city.toLowerCase()===city.toLowerCase());};// Can use this for debugging. Prints every cache entry in console\nexport const printCache=()=>{const cache=getCache();if(cache.length===0){console.log('The cache is empty.');}else{console.log('Cached Cities and their IDs:');cache.forEach(item=>{console.log(\"ID: \".concat(item.id,\", City: \").concat(item.city));});}};// Flushes cache. Mainly for debuging. You can use the line in console\nexport const flushCache=()=>{localStorage.removeItem(CACHE_KEY);};export const flushCacheInterval=time=>{var now=new Date().getTime();var setupTime=localStorage.getItem('setupTime');if(setupTime==null){localStorage.setItem('setupTime',now);}else{if(now-setupTime>time){flushCache();localStorage.setItem('setupTime',now);}}};","map":{"version":3,"names":["CACHE_KEY","CACHE_LIMIT","getCache","cache","localStorage","getItem","JSON","parse","setCache","setItem","stringify","addToCache","weatherData","filter","item","city","unshift","length","pop","getFromCache","find","toLowerCase","printCache","console","log","forEach","concat","id","flushCache","removeItem","flushCacheInterval","time","now","Date","getTime","setupTime"],"sources":["/Users/yiannis/Desktop/Weather-app-react/project/src/utils/cache.js"],"sourcesContent":["const CACHE_KEY = 'weatherCache';\nconst CACHE_LIMIT = 10; // cache size to 10 cities \n\n\n  export const getCache = () => {\n    const cache = localStorage.getItem(CACHE_KEY);\n    return cache ? JSON.parse(cache) : [];\n  };\n\n\n  export const setCache = (cache) => {\n    localStorage.setItem(CACHE_KEY, JSON.stringify(cache));\n  };\n  \n\n  export const addToCache = (weatherData) => {\n    let cache = getCache();\n    cache = cache.filter(item => item.city !== weatherData.city); // Remove existing entry for the city\n    cache.unshift(weatherData); // Add new data at the beginning\n    if (cache.length > CACHE_LIMIT) {\n      cache.pop(); // Remove the oldest entry if the cache exceeds the limit\n    }\n    setCache(cache);\n  };\n  \n  \n  export const getFromCache = (city) => {\n    const cache = getCache();\n    return cache.find(item => item.city.toLowerCase() === city.toLowerCase());\n  };\n  \n\n  // Can use this for debugging. Prints every cache entry in console\n  export const printCache = () => {\n    const cache = getCache();\n    if (cache.length === 0) {\n      console.log('The cache is empty.');\n    } else {\n      console.log('Cached Cities and their IDs:');\n      cache.forEach(item => {\n        console.log(`ID: ${item.id}, City: ${item.city}`);\n      });\n    }\n  };\n  \n  \n  // Flushes cache. Mainly for debuging. You can use the line in console\n  export const flushCache = () => {\n    localStorage.removeItem(CACHE_KEY);\n  };\n\n  export const flushCacheInterval = (time) => {\n    var now = new Date().getTime();\n    var setupTime = localStorage.getItem('setupTime');\n    if (setupTime == null) {\n      localStorage.setItem('setupTime', now);\n    } else {\n      if(now - setupTime > time) {\n        flushCache();\n        localStorage.setItem('setupTime', now);\n      }\n    }\n  };"],"mappings":"AAAA,KAAM,CAAAA,SAAS,CAAG,cAAc,CAChC,KAAM,CAAAC,WAAW,CAAG,EAAE,CAAE;AAGtB,MAAO,MAAM,CAAAC,QAAQ,CAAGA,CAAA,GAAM,CAC5B,KAAM,CAAAC,KAAK,CAAGC,YAAY,CAACC,OAAO,CAACL,SAAS,CAAC,CAC7C,MAAO,CAAAG,KAAK,CAAGG,IAAI,CAACC,KAAK,CAACJ,KAAK,CAAC,CAAG,EAAE,CACvC,CAAC,CAGD,MAAO,MAAM,CAAAK,QAAQ,CAAIL,KAAK,EAAK,CACjCC,YAAY,CAACK,OAAO,CAACT,SAAS,CAAEM,IAAI,CAACI,SAAS,CAACP,KAAK,CAAC,CAAC,CACxD,CAAC,CAGD,MAAO,MAAM,CAAAQ,UAAU,CAAIC,WAAW,EAAK,CACzC,GAAI,CAAAT,KAAK,CAAGD,QAAQ,CAAC,CAAC,CACtBC,KAAK,CAAGA,KAAK,CAACU,MAAM,CAACC,IAAI,EAAIA,IAAI,CAACC,IAAI,GAAKH,WAAW,CAACG,IAAI,CAAC,CAAE;AAC9DZ,KAAK,CAACa,OAAO,CAACJ,WAAW,CAAC,CAAE;AAC5B,GAAIT,KAAK,CAACc,MAAM,CAAGhB,WAAW,CAAE,CAC9BE,KAAK,CAACe,GAAG,CAAC,CAAC,CAAE;AACf,CACAV,QAAQ,CAACL,KAAK,CAAC,CACjB,CAAC,CAGD,MAAO,MAAM,CAAAgB,YAAY,CAAIJ,IAAI,EAAK,CACpC,KAAM,CAAAZ,KAAK,CAAGD,QAAQ,CAAC,CAAC,CACxB,MAAO,CAAAC,KAAK,CAACiB,IAAI,CAACN,IAAI,EAAIA,IAAI,CAACC,IAAI,CAACM,WAAW,CAAC,CAAC,GAAKN,IAAI,CAACM,WAAW,CAAC,CAAC,CAAC,CAC3E,CAAC,CAGD;AACA,MAAO,MAAM,CAAAC,UAAU,CAAGA,CAAA,GAAM,CAC9B,KAAM,CAAAnB,KAAK,CAAGD,QAAQ,CAAC,CAAC,CACxB,GAAIC,KAAK,CAACc,MAAM,GAAK,CAAC,CAAE,CACtBM,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAC,CACpC,CAAC,IAAM,CACLD,OAAO,CAACC,GAAG,CAAC,8BAA8B,CAAC,CAC3CrB,KAAK,CAACsB,OAAO,CAACX,IAAI,EAAI,CACpBS,OAAO,CAACC,GAAG,QAAAE,MAAA,CAAQZ,IAAI,CAACa,EAAE,aAAAD,MAAA,CAAWZ,IAAI,CAACC,IAAI,CAAE,CAAC,CACnD,CAAC,CAAC,CACJ,CACF,CAAC,CAGD;AACA,MAAO,MAAM,CAAAa,UAAU,CAAGA,CAAA,GAAM,CAC9BxB,YAAY,CAACyB,UAAU,CAAC7B,SAAS,CAAC,CACpC,CAAC,CAED,MAAO,MAAM,CAAA8B,kBAAkB,CAAIC,IAAI,EAAK,CAC1C,GAAI,CAAAC,GAAG,CAAG,GAAI,CAAAC,IAAI,CAAC,CAAC,CAACC,OAAO,CAAC,CAAC,CAC9B,GAAI,CAAAC,SAAS,CAAG/B,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC,CACjD,GAAI8B,SAAS,EAAI,IAAI,CAAE,CACrB/B,YAAY,CAACK,OAAO,CAAC,WAAW,CAAEuB,GAAG,CAAC,CACxC,CAAC,IAAM,CACL,GAAGA,GAAG,CAAGG,SAAS,CAAGJ,IAAI,CAAE,CACzBH,UAAU,CAAC,CAAC,CACZxB,YAAY,CAACK,OAAO,CAAC,WAAW,CAAEuB,GAAG,CAAC,CACxC,CACF,CACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}