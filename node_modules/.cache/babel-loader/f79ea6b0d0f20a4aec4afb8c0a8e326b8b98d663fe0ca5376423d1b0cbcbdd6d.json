{"ast":null,"code":"const CACHE_KEY = 'weatherCache';\nconst CACHE_LIMIT = 10; // cache size to 10 cities \n\nexport const getCache = () => {\n  const cache = localStorage.getItem(CACHE_KEY);\n  return cache ? JSON.parse(cache) : [];\n};\nexport const setCache = cache => {\n  localStorage.setItem(CACHE_KEY, JSON.stringify(cache));\n};\nexport const addToCache = weatherData => {\n  let cache = getCache();\n  cache = cache.filter(item => item.city !== weatherData.city); // Remove existing entry for the city\n  cache.unshift(weatherData); // Add new data at the beginning\n  if (cache.length > CACHE_LIMIT) {\n    cache.pop(); // Remove the oldest entry if the cache exceeds the limit\n  }\n  setCache(cache);\n};\nexport const getFromCache = city => {\n  const cache = getCache();\n  return cache.find(item => item.city.toLowerCase() === city.toLowerCase());\n};\n\n// Can use this for debugging. Prints every cache entry in console\nexport const printCache = () => {\n  const cache = getCache();\n  if (cache.length === 0) {\n    console.log('The cache is empty.');\n  } else {\n    console.log('Cached Cities and their IDs:');\n    cache.forEach(item => {\n      console.log(`ID: ${item.id}, City: ${item.city}`);\n    });\n  }\n};\n\n// Flushes cache. Mainly for debuging. You can use the line in console\nexport const flushCache = () => {\n  localStorage.removeItem(CACHE_KEY);\n};\nexport const flushCacheInterval = time => {\n  var now = new Date().getTime();\n  var setupTime = localStorage.getItem('setupTime');\n  if (setupTime == null) {\n    localStorage.setItem('setupTime', now);\n  } else {\n    if (now - setupTime > time) {\n      flushCache();\n      localStorage.setItem('setupTime', now);\n    }\n  }\n};","map":{"version":3,"names":["CACHE_KEY","CACHE_LIMIT","getCache","cache","localStorage","getItem","JSON","parse","setCache","setItem","stringify","addToCache","weatherData","filter","item","city","unshift","length","pop","getFromCache","find","toLowerCase","printCache","console","log","forEach","id","flushCache","removeItem","flushCacheInterval","time","now","Date","getTime","setupTime"],"sources":["/Users/yiannis/Desktop/Weather-app-react/project/src/utils/cache.js"],"sourcesContent":["const CACHE_KEY = 'weatherCache';\nconst CACHE_LIMIT = 10; // cache size to 10 cities \n\n\n  export const getCache = () => {\n    const cache = localStorage.getItem(CACHE_KEY);\n    return cache ? JSON.parse(cache) : [];\n  };\n\n\n  export const setCache = (cache) => {\n    localStorage.setItem(CACHE_KEY, JSON.stringify(cache));\n  };\n  \n\n  export const addToCache = (weatherData) => {\n    let cache = getCache();\n    cache = cache.filter(item => item.city !== weatherData.city); // Remove existing entry for the city\n    cache.unshift(weatherData); // Add new data at the beginning\n    if (cache.length > CACHE_LIMIT) {\n      cache.pop(); // Remove the oldest entry if the cache exceeds the limit\n    }\n    setCache(cache);\n  };\n  \n  \n  export const getFromCache = (city) => {\n    const cache = getCache();\n    return cache.find(item => item.city.toLowerCase() === city.toLowerCase());\n  };\n  \n\n  // Can use this for debugging. Prints every cache entry in console\n  export const printCache = () => {\n    const cache = getCache();\n    if (cache.length === 0) {\n      console.log('The cache is empty.');\n    } else {\n      console.log('Cached Cities and their IDs:');\n      cache.forEach(item => {\n        console.log(`ID: ${item.id}, City: ${item.city}`);\n      });\n    }\n  };\n  \n  \n  // Flushes cache. Mainly for debuging. You can use the line in console\n  export const flushCache = () => {\n    localStorage.removeItem(CACHE_KEY);\n  };\n\n  export const flushCacheInterval = (time) => {\n    var now = new Date().getTime();\n    var setupTime = localStorage.getItem('setupTime');\n    if (setupTime == null) {\n      localStorage.setItem('setupTime', now);\n    } else {\n      if(now - setupTime > time) {\n        flushCache();\n        localStorage.setItem('setupTime', now);\n      }\n    }\n  };"],"mappings":"AAAA,MAAMA,SAAS,GAAG,cAAc;AAChC,MAAMC,WAAW,GAAG,EAAE,CAAC,CAAC;;AAGtB,OAAO,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAC5B,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAACL,SAAS,CAAC;EAC7C,OAAOG,KAAK,GAAGG,IAAI,CAACC,KAAK,CAACJ,KAAK,CAAC,GAAG,EAAE;AACvC,CAAC;AAGD,OAAO,MAAMK,QAAQ,GAAIL,KAAK,IAAK;EACjCC,YAAY,CAACK,OAAO,CAACT,SAAS,EAAEM,IAAI,CAACI,SAAS,CAACP,KAAK,CAAC,CAAC;AACxD,CAAC;AAGD,OAAO,MAAMQ,UAAU,GAAIC,WAAW,IAAK;EACzC,IAAIT,KAAK,GAAGD,QAAQ,CAAC,CAAC;EACtBC,KAAK,GAAGA,KAAK,CAACU,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACC,IAAI,KAAKH,WAAW,CAACG,IAAI,CAAC,CAAC,CAAC;EAC9DZ,KAAK,CAACa,OAAO,CAACJ,WAAW,CAAC,CAAC,CAAC;EAC5B,IAAIT,KAAK,CAACc,MAAM,GAAGhB,WAAW,EAAE;IAC9BE,KAAK,CAACe,GAAG,CAAC,CAAC,CAAC,CAAC;EACf;EACAV,QAAQ,CAACL,KAAK,CAAC;AACjB,CAAC;AAGD,OAAO,MAAMgB,YAAY,GAAIJ,IAAI,IAAK;EACpC,MAAMZ,KAAK,GAAGD,QAAQ,CAAC,CAAC;EACxB,OAAOC,KAAK,CAACiB,IAAI,CAACN,IAAI,IAAIA,IAAI,CAACC,IAAI,CAACM,WAAW,CAAC,CAAC,KAAKN,IAAI,CAACM,WAAW,CAAC,CAAC,CAAC;AAC3E,CAAC;;AAGD;AACA,OAAO,MAAMC,UAAU,GAAGA,CAAA,KAAM;EAC9B,MAAMnB,KAAK,GAAGD,QAAQ,CAAC,CAAC;EACxB,IAAIC,KAAK,CAACc,MAAM,KAAK,CAAC,EAAE;IACtBM,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAC;EACpC,CAAC,MAAM;IACLD,OAAO,CAACC,GAAG,CAAC,8BAA8B,CAAC;IAC3CrB,KAAK,CAACsB,OAAO,CAACX,IAAI,IAAI;MACpBS,OAAO,CAACC,GAAG,CAAC,OAAOV,IAAI,CAACY,EAAE,WAAWZ,IAAI,CAACC,IAAI,EAAE,CAAC;IACnD,CAAC,CAAC;EACJ;AACF,CAAC;;AAGD;AACA,OAAO,MAAMY,UAAU,GAAGA,CAAA,KAAM;EAC9BvB,YAAY,CAACwB,UAAU,CAAC5B,SAAS,CAAC;AACpC,CAAC;AAED,OAAO,MAAM6B,kBAAkB,GAAIC,IAAI,IAAK;EAC1C,IAAIC,GAAG,GAAG,IAAIC,IAAI,CAAC,CAAC,CAACC,OAAO,CAAC,CAAC;EAC9B,IAAIC,SAAS,GAAG9B,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;EACjD,IAAI6B,SAAS,IAAI,IAAI,EAAE;IACrB9B,YAAY,CAACK,OAAO,CAAC,WAAW,EAAEsB,GAAG,CAAC;EACxC,CAAC,MAAM;IACL,IAAGA,GAAG,GAAGG,SAAS,GAAGJ,IAAI,EAAE;MACzBH,UAAU,CAAC,CAAC;MACZvB,YAAY,CAACK,OAAO,CAAC,WAAW,EAAEsB,GAAG,CAAC;IACxC;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}